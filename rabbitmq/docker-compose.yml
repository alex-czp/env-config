version: '3.7'

services:
  # default admin login name: guest
  # default admin login password: guest
  rabbitmq:
    image: rabbitmq:3.8.3-management
    container_name: rabbitmq
    hostname: rabbitmq-server
    restart: always
    ports:
      - 15672:15672
    environment: 
# Memory Limits
# RabbitMQ contains functionality which explicitly tracks and manages memory usage, and thus needs to be made aware of cgroup-imposed limits.
# The upstream configuration setting for this is vm_memory_high_watermark, and it is described under "Memory Alarms" in the documentation.
# In this image, this value is set via RABBITMQ_VM_MEMORY_HIGH_WATERMARK. The value of this environment variable is interpreted as follows:
# - 0.49 is treated as 49%, just like upstream ({ vm_memory_high_watermark, 0.49 })
# - 56% is treated as 56% (0.56; { vm_memory_high_watermark, 0.56 })
# - 1073741824 is treated as an absolute number of bytes ({ vm_memory_high_watermark, { absolute, 1073741824 } })
# - 1024MiB is treated as an absolute number of bytes with a unit ({ vm_memory_high_watermark, { absolute, "1024MiB" } })
# The main behavioral difference is in how percentages are handled. If the current container has a memory limit (--memory/-m), a percentage value will be calculated to an absolute byte value based on the memory limit, rather than being passed to RabbitMQ as-is. For example, a container run with --memory 2048m (and the implied upstream-default RABBITMQ_VM_MEMORY_HIGH_WATERMARK of 40%) will set the effective limit to 819MB (which is 40% of 2048MB).
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=0.80
      # - RABBITMQ_ERLANG_COOKIE='secret cookie here'